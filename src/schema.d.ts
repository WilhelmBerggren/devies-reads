/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/login": {
    post: operations["AppController_login"];
  };
  "/auth/register": {
    post: operations["AppController_register"];
  };
  "/is-logged-in": {
    get: operations["AppController_isLoggedIn"];
  };
  "/": {
    get: operations["AppController_getHello"];
  };
  "/users/{id}": {
    /**
     * Get one user
     * @description The shelf contains the books the user have read, are currently reading or wants to read
     */
    get: operations["UsersController_findOne"];
  };
  "/users/{id}/shelf": {
    /** Update shelf item */
    put: operations["UsersController_updateShelf"];
    /** Add shelf item */
    post: operations["UsersController_addToShelf"];
  };
  "/books": {
    /**
     * Get all books
     * @description When a user adds the book to their shelf with one of the statuses haveRead, currentlyReading or wantToRead it increments the number here
     */
    get: operations["BooksController_findAll"];
    /** Add book */
    post: operations["BooksController_addBook"];
  };
  "/books/{id}": {
    /** Get one book */
    get: operations["BooksController_findOne"];
  };
  "/books/{id}/rate": {
    /** Rate book */
    post: operations["BooksController_rateBook"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UserAuthResponseDTO: {
      userId: string;
      accessToken: string;
    };
    RegisterDTO: {
      username: string;
      password: string;
    };
    /** @enum {string} */
    ShelfStatus: "haveRead" | "currentlyReading" | "wantToRead";
    ShelfItem: {
      bookId: string;
      status: components["schemas"]["ShelfStatus"];
    };
    UserDTO: {
      id: string;
      username: string;
      shelf: components["schemas"]["ShelfItem"][];
    };
    AddBookDTO: {
      name: string;
      genre: string;
      coverUrl: string;
      description: string;
    };
    BookDTO: {
      id: string;
      name: string;
      genre: string;
      coverUrl: string;
      description: string;
      averageRating?: number;
      /** @description How many users have read the book */
      haveRead: number;
      /** @description How many users are currently reading the book */
      currentlyReading: number;
      /** @description How many users want to read the book */
      wantToRead: number;
      /** @description The authenticated user's rating */
      userRating?: number;
    };
    RateBookDTO: {
      bookId: string;
      rating: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppController_login: {
    requestBody: {
      content: {
        "application/json": {
          username?: string;
          password?: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserAuthResponseDTO"];
        };
      };
    };
  };
  AppController_register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterDTO"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserAuthResponseDTO"];
        };
      };
    };
  };
  AppController_isLoggedIn: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  AppController_getHello: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  /**
   * Get one user
   * @description The shelf contains the books the user have read, are currently reading or wants to read
   */
  UsersController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDTO"];
        };
      };
    };
  };
  /** Update shelf item */
  UsersController_updateShelf: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShelfItem"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDTO"];
        };
      };
    };
  };
  /** Add shelf item */
  UsersController_addToShelf: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShelfItem"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDTO"];
        };
      };
    };
  };
  /**
   * Get all books
   * @description When a user adds the book to their shelf with one of the statuses haveRead, currentlyReading or wantToRead it increments the number here
   */
  BooksController_findAll: {
    parameters: {
      query?: {
        /** @description Sort by name, haveRead, currentlyReading or wantToRead */
        sortBy?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BookDTO"][];
        };
      };
    };
  };
  /** Add book */
  BooksController_addBook: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddBookDTO"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BookDTO"];
        };
      };
    };
  };
  /** Get one book */
  BooksController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BookDTO"];
        };
      };
    };
  };
  /** Rate book */
  BooksController_rateBook: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RateBookDTO"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BookDTO"];
        };
      };
    };
  };
}
